aW1wb3J0IGphdmEuaW8uKjtfX25ld2xpbmVfX2ltcG9ydCBqYXZhLm1hdGguKjtfX25ld2xpbmVfX21 tcG9ydCBqYXZhLnNlY3VyaXR5Lio7X19uZXdsaW5lX19pbXBvcnQgamF2YS50ZXh0Lio7X19uZXdsa W5X19pbXBvcnQgamF2YS51dGlsLio7X19uZXdsaW5lX19pbXBvcnQgamF2YS51dGlsLmNvbmNic nJlbnQuKjtfX25ld2xpbmVfX2ltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uKjtfX25ld2xpbmVfX2ltcG 9ydCBqYXZhLnV0aWwucmVnZXguKjtfX25ld2xpbmVfX2ltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLio 7X19uZXdsaW5IX19pbXBvcnQgc3RhdGljIGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9ycy5qb2lua W5n019fbmV3bGluZV9faW1wb3J0IHN0YXRpYyBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvanM udG9MaXN0O19fbmV3bGluZV9fX19uZXdsaW5lX19jbGFzcyBSZXN1bHQge19fbmV3bGluZV9fX19u ZXdsaW5IX18gICAgLypfX25ld2xpbmVfXyAgICAgKiBDb21wbGV0ZSB0aGUgJ2dyaWRsYW5kTWV0 cm8nIGZ1bmN0aW9uIGJlbG93Ll9fbmV3bGluZV9fICAgICAqX19uZXdsaW5lX18gICAgICogVGHIIG Z1bmN0aW9uIGlzIGV4cGVjdGVkIHRVIHJldHVybiBhbiBJTIRFR0VSLI9fbmV3bGluZV9fICAgICAgIF RoZSBmdW5jdGlvbiBhY2NlcHRzIGZvbGxvd2luZyBwYXJhbWV0ZXJzOl9fbmV3bGluZV9fICAgICAgI CAxLIBJTIRFROVSIG5fX25ld2xpbmVfXyAgICAgKiAgMi4gSU5URUdFUiBtX19uZXdsaW5IX18gICAgI CogIDMUIEIOVEVHRVIga19fbmV3bGluZV9fICAgICAgICAOLiAyRF9JTIRFROVSXOFSUKFZIHRyYWN rX19uZXdsaW5IX18gICAgICovX19uZXdsaW5lX18gICAgIF9fbmV3bGluZV9fICAgICBzdGF0aWMgY 2xhc3MgUGFpciB7X19uZXdsaW5IX18gICAgICAgICBJbnRIZ2VyIG1pbjtfX25ld2xpbmVfXyAgICAgI CAgIEludGVnZXIgbWF4019fbmV3bGluZV9fICAgICAgICAgUGFpcihJbnRIZ2VyIG1pbiwgSW50ZWd IciBtYXgpIHtfX25ld2xpbmVfXyAgICAgICAgICAgICB0aGlzLm1pbiA9IG1pbjtfX25ld2xpbmVfXyAgIC AgICAgICAgICB0aGlzLm1heCA9IG1heDtfX25ld2xpbmVfXyAgICAgICAgIH1fX25ld2xpbmVfXyAgIC AgICAgIGludCB0cmFjaygpIHtfX25ld2xpbmVfXyAgICAgICAgICAgICByZXR1cm4gbWF4IC0gbWlul CsxO19fbmV3bGluZV9fICAgICAgICAgfV9fbmV3bGluZV9fICAgICB9X19uZXdsaW5lX19fX25ld2xpb mVfX3B1YmxpYyBzdGF0aWMgbG9uZyBncmlkbGFuZE1ldHJvKGludCBuLCBpbnQgbSwgaW50IGss IExpc3Q8TGlzdDxJbnRlZ2VyPj4gdHJhY2spIHtfX25ld2xpbmVfXyAgICAgICAgSGFzaE1hcDxMb25n LCBMaXNOPFRYYWNrcz4